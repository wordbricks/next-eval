name: Release @next-eval/core to npm

on:
  push:
    branches: [main]
    paths:
      - 'packages/core/**'
      - '.github/workflows/release-core.yml'

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.version-changed }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if version changed
        id: check
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./packages/core/package.json').version")

          # Get previous version from package.json in the previous commit
          git checkout HEAD~1 -- packages/core/package.json 2>/dev/null || echo "No previous commit"
          PREVIOUS_VERSION=$(node -p "require('./packages/core/package.json').version" 2>/dev/null || echo "0.0.0")

          # Reset to current version
          git checkout HEAD -- packages/core/package.json

          echo "Previous version: $PREVIOUS_VERSION"
          echo "Current version: $CURRENT_VERSION"

          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
            echo "version-changed=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged"
            echo "version-changed=false" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          fi

  release:
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run type checks
        run: bun run check-types
        working-directory: packages/core

      - name: Run lint
        run: bun run lint
        working-directory: packages/core

      - name: Build package
        run: bun run build
        working-directory: packages/core

      - name: Setup npm registry
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          echo "registry=https://registry.npmjs.org/" >> ~/.npmrc

      - name: Publish to npm
        run: npm publish --access restricted
        working-directory: packages/core
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          release_name: Release v${{ needs.check-version.outputs.version }}
          body: |
            ## Changes

            Release of @next-eval/core v${{ needs.check-version.outputs.version }}

            ### Installation (Private Package)

            ```bash
            npm install @next-eval/core
            ```

            ### Usage

            ```typescript
            import { runMDR } from '@next-eval/core/script/runMDR';
            import { PROMPTS } from '@next-eval/core/constant';
            import { replaceMultipleSpaces } from '@next-eval/core/utils/stringUtils';
            ```
          draft: false
          prerelease: false
